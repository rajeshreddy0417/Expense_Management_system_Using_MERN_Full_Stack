import React,{useState,useEffect} from 'react'
import {Form,Input,Select,Modal,message, Table,DatePicker} from 'antd'
import{UnorderedListOutlined,AreaChartOutlined,EditOutlined,DeleteOutlined} from '@ant-design/icons'
import Layout from '../components/Layout/Layout'
import axios from 'axios'
import Spinner from '../components/Spinner'
import moment from "moment"
import Analytics from '../components/Layout/Analytics'

const { RangePicker } = DatePicker;

const Homepage =() => {
    const [showModal,setShowModal]= useState(false)
    const[loading,setloading]=useState(false)
    const [form] = Form.useForm();
    const [allTransection,setallTransection]=useState([]);
    const [frequency,setfrequency]=useState('7')
    const [selectedDate,setSelectdate]=useState([]);
    const [type,setType]=useState('all')
    const [viewData,setViewdData]=useState("table")
    const [editable,setEditable]=useState("null")

    const coloumns=[
        {
            title:"Date",
            dataIndex:"date",
            render:(text) => <span>{moment(text).format("YYYY-MM-DD")}</span>
        },
        {
            title:"Amount",
            dataIndex:"amount"
        },
        {
            title:"type",
            dataIndex:"type"
        },
        {
            title:"Categorey",
            dataIndex:"category"
        },
        {
            title:"Reference",
            dataIndex:"reference"
        },
        {
            title:"Actions",
            render:(text,record)=>(
                <div>
                    <EditOutlined onClick={()=>{
                        setEditable(record)
                        setShowModal(true)
                    }}/>
                    <DeleteOutlined className="mx-2" onClick={()=>{handleDelete(record)}}/>
                </div>
            )
        },
        
    ]

    //getallTransections
  
    //UseEffect Hook
useEffect(()=>{
    const getAllTransections=async()=>{
        try {
            const user=JSON.parse(localStorage.getItem('user'))
            setloading(true)
            const res=await axios.post('/transections/get-transection',{userid:user._id,frequency,selectedDate,type})
            setloading(false)
            setallTransection(res.data)
            console.log(res.data)
            
        } catch (error) {
            console.log(error)
            message.error('Fetch Isuue with Transection');
            
        }
    };
    getAllTransections();
},[frequency,selectedDate,type]);

//Delete handler
const handleDelete=async(record)=>{
    try {
        setloading(true)
        await axios.post("/transections/delete-transection",{transactionId:record._id})
        setloading(false)
        message.success("Transection Deleted")
        
    } catch (error) {
        setloading(false)
        console.log(error)
        message.error("unable to delete")
    }

};

    //form handling
    const handleSubmit=async(values)=>{
        try {
            const user=JSON.parse(localStorage.getItem('user'))
            setloading(true)
            if(editable)
            {
                await axios.post('/transections/edit-transection',{
                    payload:{
                        ...values,
                        userId:user._id
                    },
                    transactionId:editable._id
                })
            message.success("Transection updated Successfully");
            }
            else
            {
            await axios.post('/transections/add-transection',{...values,userid:user._id})
            message.success("Transection added Successfully")
            form.resetFields();
            }
            setloading(false)
            setShowModal(false)
            setEditable(null);
            form.resetFields();
        } catch (error) {
            setloading(false)
            message.error("Failed to add transection");
        }
        
    }
    return (
        <Layout>
        {loading && <Spinner/>}
        <div className='filters'>
            <div>
                <h6>Select Frequency</h6>
                <Select value={frequency} onChange={(values) =>setfrequency(values)}>
                    <Select.Option value="7">Last 1 Week</Select.Option>
                    <Select.Option value="38" >Last 1 Month</Select.Option>
                    <Select.Option value="365">Last 1 Year</Select.Option>
                    <Select.Option value="custom">Custom</Select.Option>
                </Select>
                {frequency==='custom' && <RangePicker value={selectedDate} onChange={(values)=>setSelectdate(values)}/>}
            </div>
            <div className="filter-tab">
                <h6>Select Type</h6>
                <Select value={type} onChange={(values) =>setType(values)}>
                    <Select.Option value="all">ALL</Select.Option>
                    <Select.Option value="Income">Income</Select.Option>
                    <Select.Option value="Expense">Expense</Select.Option>
                </Select>
                {frequency==='custom' && <RangePicker value={selectedDate} onChange={(values)=>setSelectdate(values)}/>}
            </div>
            
            <div className="switch-icons">
                <UnorderedListOutlined className={`mx-2 ${viewData==='table' ? 'active-icon':'inactive-icon'}`} onClick={()=>setViewdData('table')}/>
                <AreaChartOutlined className={`mx-2 ${viewData==='analytics' ? 'active-icon':'inactive-icon'}`} onClick={()=>setViewdData('analytics')}/>
            </div>
            <div>
                <button className='btn btn-primary' onClick={()=> setShowModal(true)}>Add new</button>
                </div>
        </div>
        <div className='content'>
            {viewData ==="table" ? (<Table columns={coloumns} dataSource={allTransection}/>):(<Analytics allTransection={allTransection}/>
            )}
        </div>
        <Modal 
        title={editable ? "Edit Transaction" : "Add Transection"}
        open={showModal} 
        onCancel={()=>setShowModal(false)}
        footer={false}>
            <Form form={form} layout="vertical" onFinish={handleSubmit} initialValues={editable}>
                <Form.Item label="Amount" name="amount">
                    <Input type="text"/>
                    </Form.Item>
                    <Form.Item label="Type" name="type">
                        <Select>
                            <Select.Option value="Income">Income</Select.Option>
                            <Select.Option value="Expense">Expense</Select.Option>
                        </Select>
                    </Form.Item>
                    <Form.Item label="Category" name="category">
                        <Select>
                            <Select.Option value="salary">Salary</Select.Option>
                            <Select.Option value="tip">Tip</Select.Option>
                            <Select.Option value="project">Project</Select.Option>
                            <Select.Option value="food">Food</Select.Option>
                            <Select.Option value="movie">Movie</Select.Option>
                            <Select.Option value="bills">Bills</Select.Option>
                            <Select.Option value="medical">Medical</Select.Option>
                            <Select.Option value="fee">Fee</Select.Option>
                        </Select>
                    </Form.Item>
                    <Form.Item label="date" name="date">
                        <Input type="date"/>
                    </Form.Item>
                    <Form.Item label='Reference' name="reference">
                        <Input type="text"/>
                    </Form.Item>
                    <Form.Item label='Description' name="description">
                        <Input type="text"/>
                    </Form.Item>
                    <div classsName="d-flex justify-content-end">
                        <button className='btn btn-primary'>SAVE</button>
                    </div>


            </Form>
        
        </Modal>
        </Layout>
    )
}

export default Homepage